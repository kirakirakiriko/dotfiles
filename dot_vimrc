set nocompatible
filetype off
syntax off


call plug#begin()

"  -------------------------------------------------------------------🌸
"   Plugins
"  -------------------------------------------------------------------🌸

"   Fundamentals
"  -------------------------------------------------------🌸
Plug 'kien/ctrlp.vim'                        " Fuzzy Search
Plug 'vim-airline/vim-airline'               " Statusline
Plug 'vim-airline/vim-airline-themes'        " Color Schemes for Statusline
Plug 'editorconfig/editorconfig-vim'         " Use EditorConfig if available
Plug 'tpope/vim-surround'                    " Adds surroundings as text object
Plug 'scrooloose/nerdtree'                   " Filebrowser
Plug 'easymotion/vim-easymotion'             " Vimium like navigation
Plug 'haya14busa/incsearch.vim'              " Highlight incremental search
Plug 'haya14busa/incsearch-easymotion.vim'   " Easymotion integration for incsearch
Plug 'haya14busa/incsearch-fuzzy.vim'        " Incremental fuzzy search

"   Technical Stuff
"  -------------------------------------------------------🌸
Plug 'christoomey/vim-tmux-navigator'        " Tmux window navigation
Plug 'tmux-plugins/vim-tmux'                 " Tmux Syntax Highlighting

"   Completion
"  -------------------------------------------------------🌸
Plug 'neoclide/coc.nvim', {'branch': 'release'}

"   Syntaxes
"  -------------------------------------------------------🌸
Plug 'w0rp/ale'                              " Syntax Checking
Plug 'nbouscal/vim-stylish-haskell'          " Stylish Haskell
Plug 'heavenshell/vim-jsdoc'                 " JSDoc Helper
Plug 'othree/html5.vim'                      " HTML5
Plug 'hail2u/vim-css3-syntax'                " CSS3
Plug 'lervag/vimtex'                         " LaTeX
Plug 'pangloss/vim-javascript'               " JavaScript support
Plug 'leafgarland/typescript-vim'            " TypeScript syntax
Plug 'maxmellon/vim-jsx-pretty'              " JS and JSX syntax
Plug 'jparise/vim-graphql'

"   Color Schemes
"  -------------------------------------------------------🌸
Plug 'sickill/vim-monokai'

"   Utils and Nice-to-haves
"  -------------------------------------------------------🌸
Plug 'ntpeters/vim-better-whitespace'        " Whitespace detection and stripping
Plug 'tpope/vim-repeat'                      " Repeat functions provided by plugins
Plug 'terryma/vim-smooth-scroll'             " Smooth Scrolling
Plug 'junegunn/vim-easy-align'               " Easy text aligning
Plug 'raimondi/delimitmate'                  " Autoinsert Parentheses, brackets, etc.
Plug 'kshenoy/vim-signature'                 " Visualize marks at the left side
Plug 'yssl/QFEnter'                          " Open Quickfixes in new Tab
Plug 'tmhedberg/matchit'                     " HTML Tags as text object
Plug 'scrooloose/nerdcommenter'              " Easy commenting with <leader>c[ csm]
Plug 'airblade/vim-gitgutter'                " Git Diff Signs on left margin

call plug#end()
filetype plugin indent on


"  -------------------------------------------------------------------🌸
"   General Settings
"  -------------------------------------------------------------------🌸

set updatetime=300
set laststatus=2             " Always show statusbar
set noshowmode               " Don't show mode in statusline, it's in the air[line] tonight... oh lord
set clipboard=unnamed        " Make system clipboard accessible from vim, use "*y to copy from vim
set bs=2                     " Backspace over indentation and linebreaks
set hidden                   " Hide buffers instead of closing them, so we don't have to save upon opening a new file
set nofoldenable             " Don't fold by default
set foldmethod=syntax        " Folds defined by current syntax file
set wildignore+=node_modules " Ignore node_modules in CTRLP
set number                   " Line numbers
set relativenumber           " Relative line numbers on top"
set tw=79                    " Auto break lines when pasting over 79 characters
set nowrap                   " Don't soft-wrap lines
set nostartofline            " Don't go to start of line when scrolling
set fo-=t
set colorcolumn=80           " Highlight the 80th column
set autoindent               " Preserve indentation when adding a new line

"   History and Backup
"  -------------------------------------------------------🌸
set history=700
set undolevels=700
set writebackup              " Create backup file during writing
set nobackup                 " Delete writebackup file after writing
set noswapfile               " Most likely there will be enough memory, so no swapfile

"   Tabs and Spaces
"  -------------------------------------------------------🌸
set tabstop=2                " 2 space indentation
set softtabstop=0            " Make indentation 'fill up' the missing space
set shiftwidth=2             " 2 space indentation for < and >
set shiftround               " Make indentation 'fill up' the missing space for < and >
set expandtab                " Expand tabs to spaces

"   Searching
"  -------------------------------------------------------🌸
set hlsearch                 " Highlight search results
set incsearch                " Search as you type
set ignorecase               " Case insensitive searching
set smartcase                " Case sensitive searching, when an uppercase letter is entered

"   Splits
"  -------------------------------------------------------🌸
set splitbelow               " Open splits below by default
set splitright               " Open splits to the right by default

"   Netrw
"  -------------------------------------------------------🌸
let g:netrw_liststyle = 3
let g:netrw_browse_split = 3
let g:netrw_banner = 0
let g:netrw_winsize = 25

"  -------------------------------------------------------------------🌸
"   Visuals
"  -------------------------------------------------------------------🌸

syntax on         " Syntax highlighting
set t_Co=256      " 256 Color mode, corresponds to xterm-256color
color monokai
set conceallevel=0

hi Search ctermbg=green
hi Search ctermfg=black

hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade  Comment

hi link EasyMotionTarget2First MatchParen
hi link EasyMotionTarget2Second MatchParen

hi link EasyMotionMoveHL Search
hi link EasyMotionIncSearch Search




"  -------------------------------------------------------------------🌸
"   Keybindings
"  -------------------------------------------------------------------🌸

let mapleader=","
let maplocalleaer="-"

" Don't use arrow keys for movement
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" Change windows / splits with Ctrl + Movement keys
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h

" Tab changing
map <Leader>n <esc>:tabprevious<CR>
map <Leader>m <esc>:tabnext<CR>

" Indentation in Visual Mode
vnoremap < <gv
vnoremap > >gv

" Use . in visual mode
vnoremap . :normal .<CR>

" Clear search highlighting
map <C-c> :nohl<CR>

" Easy Align
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" Resize Splits
nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>
nnoremap <silent> <Leader>< :exe "vertical resize " . (winwidth(0) * 3/2)<CR>
nnoremap <silent> <Leader>> :exe "vertical resize " . (winwidth(0) * 2/3)<CR>

" NerdTree
map <leader>a :NERDTreeToggle<CR>

" CoC
nmap <leader>rn <Plug>(coc-rename)
nmap <leader>ac  <Plug>(coc-codeaction)
nmap <leader>qf  <Plug>(coc-fix-current)
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')



"  -------------------------------------------------------------------🌸
"   Plugin Settings
"  -------------------------------------------------------------------🌸

"   AirLine
"  -------------------------------------------------------🌸
let g:airline_powerline_fonts = 1
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_theme = 'bubblegum'
call airline#parts#define_function('ALE', 'ALEGetStatusLine')
call airline#parts#define_condition('ALE', 'exists("*ALEGetStatusLine")')
let g:airline_section_b = airline#section#create_right(['ALE'])

"   NerdTree
"  -------------------------------------------------------🌸
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"   DelimitMate
"  -------------------------------------------------------🌸
let delimitMate_expand_cr = 1

"   CtrlP
"  -------------------------------------------------------🌸
let g:ctrlp_map = '<C-a>'
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_max_depth=100

"   Easy Align
"  -------------------------------------------------------🌸
nmap ga <Plug>(EasyAlign)

"   ALE
"  -------------------------------------------------------🌸
let g:ale_fixers = {
\ 'javascript': [
\   'eslint',
\ ],
\}

nmap <A-L> :ALEFix<CR>
let g:ale_echo_msg_error_str = '過ち'
let g:ale_echo_msg_warning_str = '断り'
let g:ale_lint_delay = 100
let g:ale_statusline_format = ['%d 過ち', '%d 断り', '大丈夫']

"   Incsearch / Easymotion
"  -------------------------------------------------------🌸
function! s:config_easyfuzzymotion(...) abort
  return extend(copy({
  \   'converters': [incsearch#config#fuzzyword#converter()],
  \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
  \   'keymap': {"\<CR>": '<Over>(easymotion)'},
  \   'is_expr': 0,
  \   'is_stay': 1
  \ }), get(a:, 1, {}))
endfunction

noremap <silent><expr> <Space>/ incsearch#go(<SID>config_easyfuzzymotion())


"  -------------------------------------------------------------------🌸
"   Language Specific
"  -------------------------------------------------------------------🌸

"   Haskell
"  -------------------------------------------------------🌸
set formatprg=stylish-haskell

"   Javascript
"  -------------------------------------------------------🌸
let g:ale_javascript_eslint_use_global = 1

let g:jsdoc_enable_es6=1
let g:jsdoc_allow_input_prompt=1
let g:jsdoc_input_description=1
let g:jsdoc_underscore_private=0
let g:jsdoc_access_descriptions=2

"  -------------------------------------------------------------------🌸
"   Utils and Fixes
"  -------------------------------------------------------------------🌸

autocmd! bufwritepost .vimrc source % " Reload the config when saving vimrc

" Fix color bleed in tmux
if &term =~ '256color'
  set t_ut=
endif
